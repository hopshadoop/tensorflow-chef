#!/bin/bash

set -e
cd /home/<%= node['tensorflow']['user'] %>
if [ ! -d /home/<%= node['tensorflow']['user'] %>/tensorflow ] ; then
  git clone --recurse-submodules --branch v<%= node['tensorflow']['base_version'] %> <%= node['tensorflow']['git_url'] %>
fi

# http://stackoverflow.com/questions/41293077/how-to-compile-tensorflow-with-sse4-2-and-avx-instructions
# https://gist.github.com/kmhofmann/e368a2ebba05f807fa1a90b3bf9a1e03
# https://georgesterpu.github.io/compile_tensorflow.html

cd /home/<%= node['tensorflow']['user'] %>/tensorflow

export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

export TF_NEED_MKL=<%= node['tensorflow']['need_mkl'] %>
export TF_NEED_GCP=0
export TF_NEED_S3=0
export TF_NEED_JEMALLOC=1
export TF_NEED_OPENCL=0
export TF_CUDA_CLANG=0
export TF_ENABLE_XLA=0
export TF_NEED_CUDA=<%= node['tensorflow']['need_cuda'] %>
export TF_NEED_HDFS=1
export TF_NEED_KAFKA=1
export TF_NEED_VERBS=<%= node['tensorflow']['need_rdma'] %>
export TF_NEED_MPI=<%= node['tensorflow']['need_mpi'] %>
export TF_DOWNLOAD_MKL=<%= node['tensorflow']['need_mkl'] %>
export TF_NEED_OPENCL_SYCL=0
export TF_NEED_GDR=0
export TF_NEED_TENSORRT=0
export TF_SET_ANDROID_WORKSPACE=0

export TENSORRT_INSTALL_PATH=""

export PYTHON_BIN_PATH=$(which python)
export USE_DEFAULT_PYTHON_LIB_PATH=1
#export CC_OPT_FLAGS="-march=native"
export CC_OPT_FLAGS="-march=x86-64 -O2"

export CLANG_CUDA_COMPILER_PATH=<%= @clang_path %>
export TF_CUDA_VERSION=<%= node['cuda']['major_version'] %>
export TF_CUDNN_VERSION=<%= node['cudnn']['version'] %>
export CUDA_TOOLKIT_PATH=/usr/local/cuda
export CUDNN_INSTALL_PATH=/usr/local/cuda
# P100 = 6.0, 1080Ti/TitanX = 6.1, K80=3.7, M60=5.2
export TF_CUDA_COMPUTE_CAPABILITIES="6.0,6.1"
#"3.5,5.2"
#export TF_CUDA_VERSION=$($CUDA_TOOLKIT_PATH/bin/nvcc --version | sed -n 's/^.*release \(.*\),.*/\1/p')
#  export TF_CUDNN_VERSION=$(sed -n 's/^#define CUDNN_MAJOR\s*\(.*\).*/\1/p' $CUDNN_INSTALL_PATH/include/cudnn.h)

export GCC_HOST_COMPILER_PATH=$(which gcc)
export HOST_CXX_COMPILER=$(which g++)

export MPI_HOME=/usr/local

export PATH=$PATH:/usr/local/bin

./configure

# Check if configure completed successfully
if [ ! -f tools/bazel.rc ] ; then
  exit 1
fi
